{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"doc block": {
		"scope": "mcfunction",
		"prefix": "doc-block",
		"body": [
			"#> ${RELATIVE_FILEPATH/.*\\/data\\/(.+)\\/functions\\/(.+)\\..+$/$1:$2/}",
			"# ${1:description}",
		],
		"description": "Create a doc block"
	},
	"doc-storage": {
		"scope": "mcfunction",
		"prefix": "doc-storage",
		"body": [
			"#   storage ${1:namespace:store} ${2:path}",
			"#       ${3:description}"
		],
		"description": "Create a doc for a storage location"
	},
	"doc-storage-arg": {
		"scope": "mcfunction",
		"prefix": "doc-storage-arg",
		"body": [
			"#   storage call_stack: call.arg${2:0}",
			"#       ${3:description}"
		],
		"description": "Create a doc for a storage location"
	},
	"doc-storage-return": {
		"scope": "mcfunction",
		"prefix": "doc-storage-return",
		"body": [
			"#   storage call_stack: this.return",
			"#       ${3:description}"
		],
		"description": "Create a doc for a storage location"
	},
	"doc-score": {
		"scope": "mcfunction",
		"prefix": "doc-score",
		"body": [
			"#   ${1:$player} ${2:scoreboard}",
			"#       ${3:description}"
		],
		"description": "Create a doc for a scoreboard score"
	}
}