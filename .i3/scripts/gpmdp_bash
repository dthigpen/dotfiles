#!/bin/bash

export LANG='en_US.UTF-8'

CONFIGPATH=".config/Google Play Music Desktop Player/json_store/"
CONFIGNAME="playback.json"

FILE="$HOME/$CONFIGPATH$CONFIGNAME"

#exit early if no playback file is found
if [ ! -f "$FILE" ]; then
	exit $?
fi

getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "I’m sorry, `getopt --test` failed in this environment."
    exit 1
fi

is_playing=$(python3 -c "import json; print(json.load(open('$FILE','r'))['playing'])")
if [ $is_playing = "False" ]; then 
    song_title=$(python3 -c "import json; print(json.load(open('$FILE','r'))['song']['title'])")
    if [ "$song_title" = "None" ]; then
	exit
    fi
fi
OPTIONS=taApr
LONGOPTIONS=title,album,Artist,progress,rating

# -temporarily store output to be able to check for errors
# -activate advanced mode getopt quoting e.g. via “--options”
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# use eval with "$PARSED" to properly handle the quoting
eval set -- "$PARSED"

result_str=""
#change SEP_SYMBOL for different seperator
SEP_SYMBOL=" - "
#font-awesome thumbs up/down symbols
LIKED_TRUE_SYMBOL=""
LIKED_FALSE_SYMBOL=""
DISLIKED_TRUE_SYMBOL=""
DISLIKED_FALSE_SYMBOL=""

SEP=""

while true; do
    case "$1" in
	-t|--title)
            song_title=$(python3 -c "import json; print(json.load(open('$FILE','r'))['song']['title'])")
	    result_str="$result_str$SEP$song_title"
	    shift
            ;;
        -a|--album)
            song_album=$(python3 -c "import json; print(json.load(open('$FILE','r'))['song']['album'])")
	    result_str="$result_str$SEP$song_album"
	    shift
            ;;
        -A|--Artist)
            song_artist=$(python3 -c "import json; print(json.load(open('$FILE','r'))['song']['artist'])")
	    result_str="$result_str$SEP$song_artist"
            shift
            ;;
        -p|--progress)
            time_current=$(python3 -c "import json; print(json.load(open('$FILE','r'))['time']['current'])")
	    time_total=$(python3 -c "import json; print(json.load(open('$FILE','r'))['time']['total'])")
	    #
	    sec_curr=$(( (time_current / 1000) % 60 ))
	    min_curr=$(( (time_current / 1000) / 60 ))
	    
	    sec_tot=$(( (time_total / 1000) % 60 ))
	    min_tot=$(( (time_total / 1000) / 60 ))
	    
	    song_progress=$(printf %01d:%02d/%01d:%02d "$min_curr" "$sec_curr" "$min_tot" "$sec_tot")
	    result_str="$result_str$SEP$song_progress"
            shift
            ;;
        -r|--rating)
            rating_liked=$(python3 -c "import json; print(json.load(open('$FILE','r'))['rating']['liked'])")
	    rating_disliked=$(python3 -c "import json; print(json.load(open('$FILE','r'))['rating']['disliked'])")
	    rating_str=""
	    if [ "$rating_liked" = "True" ]; then
		rating_str="$rating_str$LIKED_TRUE_SYMBOL"
	    else	 
		rating_str="$rating_str$LIKED_FALSE_SYMBOL"
	    fi
	    rating_str="$rating_str  "
	    if [ "$rating_disliked" = "True" ]; then
		rating_str="$rating_str$DISLIKED_TRUE_SYMBOL"
	    else	 
		rating_str="$rating_str$DISLIKED_FALSE_SYMBOL"
	    fi

	    result_str="$result_str$SEP$rating_str"
	    shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
    SEP="$SEP_SYMBOL"
done

echo "$result_str"
