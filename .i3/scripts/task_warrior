#!/bin/bash

# -n|--next, show the task that is up next
# -a|--active,show the most urgent active task
# -A, warn when no active task
# -e|--elapsed, if active show elapsed time since 'start'
# -d|--due, show when task is due


#current task
task=""
id=""
urgent=""
started=""
result=""
#TEMP VAR WARN

#only gets the first description
#task=$(task _get $(task +ACTIVE _id).description)
#get all ids of active tasks
id=$(task +ACTIVE _id)
#turn into array, split id output by newline
IFS=$'\n' read -r -d '' -a active_ids <<< "$id"
maxUrgency=-1.0
maxId=0
#echo "${#active_ids[@]}"
declare -a elapsed
index=0
indexOfMax=0
#find id of active task with most urgency
#and calculate the elapsed time since last declared active
for i in "${active_ids[@]}"
do

	#get time info
	started=$(task _get $i.start)
	startedSec=$(date --date="$started" +"%s")
	now=$(date +"%s")
	#days
	days=$(( (now - startedSec) / 86400 ))
	#hours
	hours=$(( (now - startedSec) / 3600 ))
	#minutes
	minutes=$(( (now - startedSec) / 60 ))

	#find most appropriate elapsed time (m) (h) (d)
	if(( $days > 0)); then
		elapsed[index]="${days}m $((hours-24*days))h"
	elif(( $hours > 0)); then
		elapsed[index]="${hours}h $((minutes-60*hours))m"
	else
		elapsed[index]="${minutes}m"
	fi


	#get urgency of task
	urgent=$(task _get $i.urgency)
	isGreater=$(echo $urgent'>='$maxUrgency | bc -l)
	if [ "$isGreater" -eq "1" ]; then
		maxUrgency=$urgent
		maxId=$i
		indexOfMax=$index
	fi
	let "index++"
done

if [[ ! -z $id ]]; then
	task=$(task _get $maxId.description)
	echo "$maxId. $task - ${elapsed[indexOfMax]}"
	echo "task $maxId."
elif [[ 1==1 ]]; then
	echo "No task!"
	echo ""
	echo "#ff0000"
fi
